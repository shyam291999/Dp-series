
int solve(int indx, vector<int> &nums, vector<int> &dp){
    
    if(indx == 0) return nums[indx];
    if(indx < 0) return 0;
    if(dp[indx] != -1) return dp[indx];
    
    int pick = nums[indx] + solve(indx - 2, nums, dp);
    int nonpick = 0 + solve(indx-1, nums, dp);
    return dp[indx] = max(pick, nonpick);
    
}

int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    int n = nums.size();
    //vector<int> dp(n,-1);
    //return  solve(n-1, nums, dp);
    
    
    //tabulation
    vector<int> dp(n,0);
    dp[0] = nums[0];
    
//     for(int i = 1;i<n;i++){
//         int pick = nums[i];
//         if( i > 1){
//             pick = pick + dp[i-2];
//         }
//         int nonpick = 0 + dp[i-1];
//         dp[i] = max(pick, nonpick);
//     }
//       return dp[n-1];
    
    
    
 ///space optimization
    // n-3      n-2   n-1  n
//        prev2   prev   i
    int prev = nums[0];   
    int prev2 = 0;
    for(int i = 1;i<n;i++){
        int pick = nums[i];
        if(i>1){
           pick += prev2;
        }
        int nonpick = 0 + prev;
        int curr = max(pick, nonpick);
        prev2 = prev;
        prev = curr;
    }
    return prev;
}
