int solve(int day, int last, vector<vector<int>> &points, vector<vector<int>> &dp){
    if(day == 0){
        
        int maxi = 0;
        for(int event = 0;event < 3;event ++){
            if( event != last){
                maxi = max(maxi, points[day][event]);
            }
        }
    return maxi;
    }
    if(dp[day][last] != -1) return dp[day][last];
    int maxi = 0;
    for(int event = 0;event < 3;event ++){
        if(event != last){
            int point = points[day][event] + solve(day-1, event, points,dp);
            maxi = max(maxi, point);
        }
    }
   return dp[day][last] = maxi;
}
int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here.
//       vector<vector<int>> dp(n, vector<int>(4,-1));
//     return solve(n-1,3, points,dp);
    
    // tabulations
    vector<vector<int>> dp(n, vector<int>(4,0));
    dp[0][0] = max(points[0][1], points[0][2]);
    dp[0][1] = max(points[0][0], points[0][2]);
    dp[0][2] = max(points[0][1], points[0][0]);
    dp[0][3] = max(points[0][1], max(points[0][0], points[0][2]));
    
    for(int day = 1;day<n;day++){
        for(int last = 0;last<4;last++){
            //dp[day][last] = 0;
            for(int task =0;task<3;task++){
                if(task != last){
                    int point = points[day][task] + dp[day-1][task];
                    dp[day][last] = max(dp[day][last], point);
                }
            } 
        }
    }
    return dp[n-1][3];
//     for (int i = 0; i < dp.size(); i++)
//     {
//         for (int j = 0; j < dp[i].size(); j++)
//         {
//             cout << dp[i][j] << " ";
//         }    
//         cout << endl;
//     }
    
    
   //space optimization 
    
    vector<int> prev(4,0);
    prev[0] = max(points[0][1], points[0][2]);
    prev[1] = max(points[0][0], points[0][2]);
    prev[2] = max(points[0][1], points[0][0]);
    prev[3] = max(points[0][1],max(points[0][2],points[0][0]));
    
    for(int day = 1;day<n;day++){
        vector<int> temp(4, 0);
        for(int last=0;last<4;last++){
            for(int task = 0;task<3;task++){
                if(task != last){
                    temp[last] = max(temp[last], points[day][task] + prev[task]);
                }
            }
        }
        prev = temp;
    }
    return prev[3];
}
